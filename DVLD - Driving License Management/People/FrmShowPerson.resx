<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAMMOAADDDgAAAAAAAAAA
        AAAAAADfAAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAADnAAAAMgAA
        AAAAAAAAAAAAAAAAAP8AAAD1AAAA0AAAANcAAAD9AAAA8QAAAM4AAADNAAAAzQAAAM0AAADNAAAAzQAA
        AM0AAADNAAAAzQAAAM0AAADNAAAAzQAAAM0AAADNAAAAzQAAAM0AAADNAAAAzQAAAM0AAADNAAAA7AAA
        APoAAABJAAAAAAAAAAAAAAAAAAAA/wAAANEAAAAcAAAAPgAAAPQAAAC7AAAAFQAAAA8AAAANAAAADAAA
        AAwAAAAMAAAADAAAAAwAAAAMAAAADAAAAAwAAAAMAAAADAAAAAwAAAAMAAAADAAAAAwAAAAMAAAADwAA
        ABAAAACiAAAA/gAAAEkAAAAAAAAAAAAAAAAAAAD/AAAAzQAAAA0AAAAxAAAA8wAAALcAAAAFAAAABwAA
        ADIAAAA9AAAAPAAAADwAAAA8AAAAPAAAADwAAAA8AAAAPAAAADwAAAA8AAAAPAAAADwAAAA8AAAAPAAA
        ADYAAAAMAAAAAAAAAJwAAAD+AAAASQAAAAAAAAAAAAAAAAAAAP8AAADNAAAADQAAADEAAADzAAAAtwAA
        AAIAAABKAAAA8AAAAPoAAAD5AAAA+QAAAPkAAAD5AAAA+QAAAPkAAAD5AAAA+QAAAPkAAAD5AAAA+QAA
        APkAAAD5AAAA9wAAAGMAAAAAAAAAnAAAAP4AAABJAAAAAAAAAAAAAAAAAAAA/wAAAM0AAAANAAAAMQAA
        APMAAAC3AAAABAAAACcAAACcAAAAqwAAAKoAAACqAAAAqgAAAKoAAACqAAAAqgAAAKoAAACqAAAAqgAA
        AKoAAACqAAAAqgAAAKoAAACjAAAANgAAAAAAAACcAAAA/gAAAEkAAAAAAAAAAAAAAAAAAAD/AAAAzQAA
        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
        w8DAAAAA8AAAAPAAAAH//8B////Af///4H8=
</value>
  </data>
</root>