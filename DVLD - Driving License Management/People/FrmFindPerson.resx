<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAMMOAADDDgAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAB8AAAAtAAAAFgAA
        AAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABcAAACLAAAA2wAA
        AOoAAADNAAAAawAAAAoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZAAAArQAA
        AP4AAADYAAAAvgAAAO4AAAD6AAAAdAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGQAA
        AK0AAAD/AAAArgAAACEAAAAGAAAAWAAAAPMAAADXAAAAHwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        ABkAAACtAAAA/wAAAK0AAAAZAAAAAAAAAAAAAAAQAAAAzQAAAPAAAAA5AAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAABwAAACUAAABLAAAAZgAAAHIAAABtAAAAVwAAADUAAAARAAAAAQAA
        AAAAAAAZAAAArQAAAP8AAACtAAAAGQAAAAAAAAAAAAAAAAAAADgAAADpAAAA4QAAACgAAAAAAAAAAAAA
        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
        eH/g/+B/8D+A//gAAf/8AAP//gAP///Af/8=
</value>
  </data>
</root>